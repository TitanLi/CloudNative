---
version: '2.0'

name: create-vm-demo

workflows:
  create_vm_wf:
    type: direct
    description: Simple workflow example

    input:
      - vm_name
      - image_ref
      - flavor_ref
    output:
      vm_id: "{{ _.vm_id }}"
      vm_status: <% $.vm_status %>

    tasks:
      create_service:
        action: nova.servers_create name=<% $.vm_name %> image=<% $.image_ref %> flavor=<% $.flavor_ref %>
        publish:
          vm_id: <% task().result.id %>
        on-success:
          - wait_for_instance
        on-error:
          - create_vm_fail

      wait_for_instance:
        action: nova.servers_find id={{ _.vm_id }} status='ACTIVE'
        retry:
          delay: 5
          count: 15
        on-success:
          - create_vm_success
        on-error:
          - create_vm_fail
          
      create_vm_success:
        workflow: success_email_wf name=<% $.vm_name %> status=<% task(wait_for_instance).result.status %>

      create_vm_fail:
        workflow: fail_email_wf name=<% $.vm_name %> status='Failed'

  
  success_email_wf:
    type: direct
    description: Simple workflow example

    input:
      - name
      - status
    tasks:
      success_send_email:
        action: std.http
        input:
          url: 'http://10.0.1.97:3001/success/?message=VM name:<% $.name %> <br> status:<% $.status %>'
          method: GET

  fail_email_wf:
    type: direct
    description: Simple workflow example

    input:
      - name
      - status
    tasks:
      fail_send_email:
        action: std.http
        input:
          url: 'http://10.0.1.97:3001/fail/?message=VM Creation Failed Name:<% $.name %> <br> status:<% $.status %>'
          method: GET